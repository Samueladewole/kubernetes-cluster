keycloak:
  hostAliases:
   - ip: "192.168.205.90"
     hostnames:
       - "keycloak.example"

  replicas: 1
  restartPolicy: Always
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    # name: keycloak

  securityContext:
    fsGroup: 1000
  containerSecurityContext:
    runAsUser: 1000
    runAsNonRoot: true

  ## Additional init containers, e. g. for providing custom themes
  extraInitContainers: |

  ## Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
  extraContainers: |

  ## lifecycleHooks defines the container lifecycle hooks
  lifecycleHooks: |
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "ls"]

  ## Additional arguments to start command e.g. -Dkeycloak.import= to load a realm
  extraArgs: ""

  # Username for the initial Keycloak admin user
  username: keycloak

  ## Password for the initial Keycloak admin user. Applicable only if existingSecret is not set.
  ## If not set, a random 10 characters password will be used
  password: "keycloak"

  ## The path keycloak will be served from. To serve keycloak from the root path, use two quotes (e.g. "").
  basepath: "auth"

  ## WildFly CLI configurations. They all end up in the file 'keycloak.cli' configured in the configmap which is
  ## executed on server startup.
  cli:
    enabled: true
    nodeIdentifier: |
      {{ .Files.Get "scripts/node-identifier.cli" }}
    logging: |
      {{ .Files.Get "scripts/logging.cli" }}
    ha: |
      {{ .Files.Get "scripts/ha.cli" }}
    datasource: |
      {{ .Files.Get "scripts/datasource.cli" }}
    # Custom CLI script
    custom: |

  extraEnv: |
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    # - name: KEYCLOAK_LOGLEVEL
    #   value: DEBUG
    # - name: WILDFLY_LOGLEVEL
    #   value: DEBUG
    # - name: CACHE_OWNERS
    #   value: "2"
    # - name: DB_QUERY_TIMEOUT
    #   value: "60"
    # - name: DB_VALIDATE_ON_MATCH
    #   value: true
    # - name: DB_USE_CAST_FAIL
    #   value: false

  ## Custom startup scripts to run before Keycloak starts up
  startupScripts: {}
    # mystartup.sh: |
    #   #!/bin/sh
    #
    #   echo 'Hello from my custom startup script!'

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"
    labels: {}
    # key: value
    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP
    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000
    port: 80
    # Optional: jGroups port for high availability clustering
    jgroupsPort: 7600

  ## Ingress configuration.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/

  ingress:
    enabled: true
    path: /
    hosts:
      - keycloak.example
  # Route for OpenShift
  # route:
  #   enabled: true
  #   path: /auth
      # host:
      #   - keycloak.example
  #   tls:
  #     enabled: true
  #     insecureEdgeTerminationPolicy: Redirect
  #     termination: edge
  
persistence:
  # If true, the Postgres chart is deployed
  deployPostgres: true
  # The database vendor. Can be either "postgres", "mysql", "mariadb", or "h2"
  dbVendor: postgres

  # ## The following values only apply if "deployPostgres" is set to "false"
  # ## Specifies an existing secret to be used for the database password
  # #existingSecret: ""
  # ## The key in the existing secret that stores the password
  # #existingSecretKey: password

  # dbName: keycloak
  # dbHost: mykeycloak
  # dbPort: 5432
  # dbUser: keycloak
  # # Only used if no existing secret is specified. In this case a new secret is created
  # dbPassword: "keycloak"

postgresql:
  ### PostgreSQL User to create.
  ##
  postgresqlUsername: keycloak
  ## PostgreSQL Password for the new user.
  ## If not set, a random 10 characters password will be used.
  ##
  postgresqlPassword: "keycloak"
  ## PostgreSQL Database to create.
  ##
  postgresqlDatabase: keycloak
  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  ##
  persistence:
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    ##
    enabled: true